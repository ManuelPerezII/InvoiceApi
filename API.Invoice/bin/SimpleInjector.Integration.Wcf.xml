<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SimpleInjector.Integration.Wcf</name>
    </assembly>
    <members>
        <member name="T:SimpleInjector.Integration.Wcf.SimpleInjectorServiceBehavior">
            <summary>
            <see cref="T:System.ServiceModel.Description.IServiceBehavior"/> implementation for Simple Injector.
            </summary>
        </member>
        <member name="M:SimpleInjector.Integration.Wcf.SimpleInjectorServiceBehavior.#ctor(SimpleInjector.Container)">
            <summary>Initializes a new instance of the <see cref="T:SimpleInjector.Integration.Wcf.SimpleInjectorServiceBehavior"/> class.</summary>
            <param name="container">The container instance.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="container"/> is a null reference.
            </exception>
        </member>
        <member name="M:SimpleInjector.Integration.Wcf.SimpleInjectorServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
            <summary>
            Provides the ability to pass custom data to binding elements to support the contract implementation.
            </summary>
            <param name="serviceDescription">The service description of the service.</param>
            <param name="serviceHostBase">The host of the service.</param>
            <param name="endpoints">The service endpoints.</param>
            <param name="bindingParameters">Custom objects to which binding elements have access.</param>
        </member>
        <member name="M:SimpleInjector.Integration.Wcf.SimpleInjectorServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
            <summary>
            Provides the ability to change run-time property values or insert custom extension objects such as
            error handlers, message or parameter interceptors, security extensions, and other custom extension
            objects.
            </summary>
            <param name="serviceDescription">The service description.</param>
            <param name="serviceHostBase">The host that is currently being built.</param>
        </member>
        <member name="M:SimpleInjector.Integration.Wcf.SimpleInjectorServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
            <summary>
            Provides the ability to inspect the service host and the service description to confirm that the
            service can run successfully.
            </summary>
            <param name="serviceDescription">The service description.</param>
            <param name="serviceHostBase">The service host that is currently being constructed.</param>
        </member>
        <member name="T:SimpleInjector.Integration.Wcf.SimpleInjectorServiceHost">
            <summary>
            This service host is used to set up the service behavior that replaces the instance provider to use
            dependency injection.
            </summary>
        </member>
        <member name="M:SimpleInjector.Integration.Wcf.SimpleInjectorServiceHost.#ctor(SimpleInjector.Container,System.Type,System.Uri[])">
            <summary>
            Initializes a new instance of the <see cref="T:SimpleInjector.Integration.Wcf.SimpleInjectorServiceHost"/> class.
            </summary>
            <param name="container">The container.</param>
            <param name="serviceType">Type of the service.</param>
            <param name="baseAddresses">The base addresses.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="container"/> is a null
            reference or <paramref name="serviceType"/> is a null reference.</exception>
        </member>
        <member name="M:SimpleInjector.Integration.Wcf.SimpleInjectorServiceHost.#ctor(SimpleInjector.Container,System.Object,System.Uri[])">
            <summary>
            Initializes a new instance of the <see cref="T:SimpleInjector.Integration.Wcf.SimpleInjectorServiceHost"/> class.
            </summary>
            <param name="container">The container.</param>
            <param name="singletonInstance">The instance of the hosted service.</param>
            <param name="baseAddresses">The base addresses.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="container"/> is a null
            reference or <paramref name="singletonInstance"/> is a null reference.</exception>
        </member>
        <member name="M:SimpleInjector.Integration.Wcf.SimpleInjectorServiceHost.GetImplementedContracts">
            <summary>Gets the contracts implemented by the service hosted.</summary>
            <returns>The collection of <see cref="T:System.ServiceModel.Description.ContractDescription"/>s.</returns>
        </member>
        <member name="M:SimpleInjector.Integration.Wcf.SimpleInjectorServiceHost.OnOpening">
            <summary>Opens the channel dispatchers.</summary>
        </member>
        <member name="T:SimpleInjector.Integration.Wcf.SimpleInjectorServiceHostFactory">
            <summary>
            Factory that provides instances of <see cref="T:SimpleInjector.Integration.Wcf.SimpleInjectorServiceHost"/> in managed hosting
            environments where the host instance is created dynamically in response to incoming messages.
            </summary>
        </member>
        <member name="M:SimpleInjector.Integration.Wcf.SimpleInjectorServiceHostFactory.SetContainer(SimpleInjector.Container)">
            <summary>Sets the container.</summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:SimpleInjector.Integration.Wcf.SimpleInjectorServiceHostFactory.CreateServiceHost(System.Type,System.Uri[])">
            <summary>
            Creates a <see cref="T:SimpleInjector.Integration.Wcf.SimpleInjectorServiceHost"/> for a specified type of service with a specific
            base address.
            </summary>
            <returns>
            A <see cref="T:SimpleInjector.Integration.Wcf.SimpleInjectorServiceHost"/> for the type of service specified with a specific base
            address.
            </returns>
            <param name="serviceType">
            Specifies the type of service to host.
            </param>
            <param name="baseAddresses">
            The <see cref="T:System.Array"/> of type <see cref="T:System.Uri"/> that contains the base
            addresses for the service hosted.
            </param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="serviceType"/> is a null
            reference.</exception>
        </member>
        <member name="T:SimpleInjector.SimpleInjectorWcfExtensions">
            <summary>
            Extension methods for integrating Simple Injector with WCF services.
            </summary>
        </member>
        <member name="M:SimpleInjector.SimpleInjectorWcfExtensions.RegisterWcfServices(SimpleInjector.Container,System.Reflection.Assembly[])">
            <summary>
            Registers the WCF services instances (public classes that implement an interface that
            is decorated with a <see cref="T:System.ServiceModel.ServiceContractAttribute"/>) that are
            declared as public non-abstract in the supplied set of <paramref name="assemblies"/>.
            </summary>
            <param name="container">The container the services should be registered in.</param>
            <param name="assemblies">The assemblies to search.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="container"/> is
            a null reference.</exception>
        </member>
    </members>
</doc>
